/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of InvitationStorieDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `InvitationDocument.toObject()`.
 * ```
 * const invitationObject = invitation.toObject();
 * ```
 */
export type InvitationStorie = {
  title: string;
  image?: string;
  content: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Lean version of InvitationGalleryDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `InvitationDocument.toObject()`.
 * ```
 * const invitationObject = invitation.toObject();
 * ```
 */
export type InvitationGallery = {
  url: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Lean version of InvitationTimelineDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `InvitationDocument.toObject()`.
 * ```
 * const invitationObject = invitation.toObject();
 * ```
 */
export type InvitationTimeline = {
  title: string;
  date: Date;
  location?: string;
  url?: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Lean version of InvitationSpecialGuestDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `InvitationDocument.toObject()`.
 * ```
 * const invitationObject = invitation.toObject();
 * ```
 */
export type InvitationSpecialGuest = {
  name: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Lean version of InvitationWisheDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `InvitationDocument.toObject()`.
 * ```
 * const invitationObject = invitation.toObject();
 * ```
 */
export type InvitationWishe = {
  name: string;
  address?: string;
  wish: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Lean version of InvitationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `InvitationDocument.toObject()`. To avoid conflicts with model names, use the type alias `InvitationObject`.
 * ```
 * const invitationObject = invitation.toObject();
 * ```
 */
export type Invitation = {
  title: string;
  slug: string;
  coverImage: string;
  landingImage: string;
  quote: {
    content: string;
    verse?: string;
  };
  startDate: Date;
  endDate?: Date;
  maleBride: {
    name: string;
    image?: string;
    father?: string;
    mother?: string;
  };
  femaleBride: {
    name: string;
    image?: string;
    father?: string;
    mother?: string;
  };
  stories: InvitationStorie[];
  gallery: InvitationGallery[];
  timelines: InvitationTimeline[];
  specialGuests: InvitationSpecialGuest[];
  music?: string;
  wishes: InvitationWishe[];
  _id?: mongoose.Types.ObjectId;
};

/**
 * Lean version of InvitationDocument (type alias of `Invitation`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Invitation } from "../models"
 * import { InvitationObject } from "../interfaces/mongoose.gen.ts"
 *
 * const invitationObject: InvitationObject = invitation.toObject();
 * ```
 */
export type InvitationObject = Invitation;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type InvitationQuery = mongoose.Query<
  any,
  InvitationDocument,
  InvitationQueries
> &
  InvitationQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `InvitationSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type InvitationQueries = {};

export type InvitationMethods = {};

export type InvitationStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Invitation = mongoose.model<InvitationDocument, InvitationModel>("Invitation", InvitationSchema);
 * ```
 */
export type InvitationModel = mongoose.Model<
  InvitationDocument,
  InvitationQueries
> &
  InvitationStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Invitation schema instances:
 * ```
 * const InvitationSchema: InvitationSchema = new mongoose.Schema({ ... })
 * ```
 */
export type InvitationSchema = mongoose.Schema<
  InvitationDocument,
  InvitationModel,
  InvitationMethods,
  InvitationQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `InvitationDocument["stories"]` element.
 */
export type InvitationStorieDocument = mongoose.Types.Subdocument & {
  title: string;
  image?: string;
  content: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `InvitationDocument["gallery"]` element.
 */
export type InvitationGalleryDocument = mongoose.Types.Subdocument & {
  url: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `InvitationDocument["timelines"]` element.
 */
export type InvitationTimelineDocument = mongoose.Types.Subdocument & {
  title: string;
  date: Date;
  location?: string;
  url?: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `InvitationDocument["specialGuests"]` element.
 */
export type InvitationSpecialGuestDocument = mongoose.Types.Subdocument & {
  name: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `InvitationDocument["wishes"]` element.
 */
export type InvitationWisheDocument = mongoose.Types.Subdocument & {
  name: string;
  address?: string;
  wish: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Invitation = mongoose.model<InvitationDocument, InvitationModel>("Invitation", InvitationSchema);
 * ```
 */
export type InvitationDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  InvitationQueries
> &
  InvitationMethods & {
    title: string;
    slug: string;
    coverImage: string;
    landingImage: string;
    quote: {
      content: string;
      verse?: string;
    };
    startDate: Date;
    endDate?: Date;
    maleBride: {
      name: string;
      image?: string;
      father?: string;
      mother?: string;
    };
    femaleBride: {
      name: string;
      image?: string;
      father?: string;
      mother?: string;
    };
    stories: mongoose.Types.DocumentArray<InvitationStorieDocument>;
    gallery: mongoose.Types.DocumentArray<InvitationGalleryDocument>;
    timelines: mongoose.Types.DocumentArray<InvitationTimelineDocument>;
    specialGuests: mongoose.Types.DocumentArray<InvitationSpecialGuestDocument>;
    music?: string;
    wishes: mongoose.Types.DocumentArray<InvitationWisheDocument>;
    _id?: mongoose.Types.ObjectId;
  };

/**
 * Lean version of WishDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `WishDocument.toObject()`. To avoid conflicts with model names, use the type alias `WishObject`.
 * ```
 * const wishObject = wish.toObject();
 * ```
 */
export type Wish = {
  name: string;
  address?: string;
  wish: string;
  _id?: mongoose.Types.ObjectId;
};

/**
 * Lean version of WishDocument (type alias of `Wish`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Wish } from "../models"
 * import { WishObject } from "../interfaces/mongoose.gen.ts"
 *
 * const wishObject: WishObject = wish.toObject();
 * ```
 */
export type WishObject = Wish;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type WishQuery = mongoose.Query<any, WishDocument, WishQueries> &
  WishQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `WishSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type WishQueries = {};

export type WishMethods = {};

export type WishStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Wish = mongoose.model<WishDocument, WishModel>("Wish", WishSchema);
 * ```
 */
export type WishModel = mongoose.Model<WishDocument, WishQueries> & WishStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Wish schema instances:
 * ```
 * const WishSchema: WishSchema = new mongoose.Schema({ ... })
 * ```
 */
export type WishSchema = mongoose.Schema<
  WishDocument,
  WishModel,
  WishMethods,
  WishQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Wish = mongoose.model<WishDocument, WishModel>("Wish", WishSchema);
 * ```
 */
export type WishDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  WishQueries
> &
  WishMethods & {
    name: string;
    address?: string;
    wish: string;
    _id?: mongoose.Types.ObjectId;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
